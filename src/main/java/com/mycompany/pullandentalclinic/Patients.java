/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.pullandentalclinic;

import com.mycompany.pullandentalclinic.JasperReportUtil;
import java.awt.HeadlessException;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.naming.spi.DirStateFactory.Result;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;


/**
 *
 * @author Rebecca
 */
public class Patients extends javax.swing.JFrame {

    /**
     * Creates new form Patients
     */
    public Patients() {
        initComponents();
        displayPatients();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        patsave = new javax.swing.JButton();
        patdelete = new javax.swing.JButton();
        patoccupation = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        patname = new javax.swing.JTextField();
        patemail = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        patgender = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        patdob = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        patage = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        pataddress = new javax.swing.JTextField();
        patzipcode = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        patcontact = new javax.swing.JTextField();
        patreligion = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        patallergies = new javax.swing.JTextField();
        reportsedit = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        PatTable = new javax.swing.JTable();
        searchField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        patname2 = new javax.swing.JTextField();
        reportsedit1 = new javax.swing.JButton();
        patdelete1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();

        jCheckBox1.setText("jCheckBox1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        patsave.setText("Save");
        patsave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patsaveMouseClicked(evt);
            }
        });
        patsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patsaveActionPerformed(evt);
            }
        });

        patdelete.setText("Delete");
        patdelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patdeleteMouseClicked(evt);
            }
        });

        patoccupation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patoccupationActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI Symbol", 0, 14)); // NOI18N
        jLabel5.setText("Name");

        patname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patnameActionPerformed(evt);
            }
        });

        patemail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                patemailFocusLost(evt);
            }
        });
        patemail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patemailActionPerformed(evt);
            }
        });
        patemail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                patemailKeyTyped(evt);
            }
        });

        jLabel19.setText("Occupation");

        jLabel6.setFont(new java.awt.Font("Segoe UI Symbol", 0, 14)); // NOI18N
        jLabel6.setText("E-mail");

        patgender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female" }));

        jLabel17.setText("Gender");

        jLabel7.setText("Date of Birth");

        patage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patageActionPerformed(evt);
            }
        });
        patage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                patageKeyTyped(evt);
            }
        });

        jLabel14.setText("Age");

        jLabel8.setFont(new java.awt.Font("Segoe UI Symbol", 0, 12)); // NOI18N
        jLabel8.setText("Home Address");

        pataddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pataddressActionPerformed(evt);
            }
        });

        patzipcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patzipcodeActionPerformed(evt);
            }
        });
        patzipcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                patzipcodeKeyTyped(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI Symbol", 0, 12)); // NOI18N
        jLabel9.setText("City Zip Code");

        jLabel10.setFont(new java.awt.Font("Segoe UI Symbol", 0, 12)); // NOI18N
        jLabel10.setText("Mobile No. (+63)");

        patcontact.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                patcontactFocusLost(evt);
            }
        });
        patcontact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patcontactActionPerformed(evt);
            }
        });
        patcontact.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                patcontactKeyTyped(evt);
            }
        });

        patreligion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patreligionActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe UI Symbol", 0, 12)); // NOI18N
        jLabel11.setText("Religion");

        jLabel18.setText("Allergies");

        jLabel3.setFont(new java.awt.Font("Segoe UI Symbol", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 102, 255));
        jLabel3.setText("Patients");

        patallergies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patallergiesActionPerformed(evt);
            }
        });

        reportsedit.setText("Edit");
        reportsedit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reportseditMouseClicked(evt);
            }
        });

        PatTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Email", "Home Address", "Zip Code", "Mobile No.", "Religion", "Birthday", "gender", "age", "Occupation", "Allergies"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        PatTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PatTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(PatTable);
        if (PatTable.getColumnModel().getColumnCount() > 0) {
            PatTable.getColumnModel().getColumn(0).setResizable(false);
            PatTable.getColumnModel().getColumn(0).setPreferredWidth(35);
        }

        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });
        searchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchFieldKeyTyped(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe UI Symbol", 0, 14)); // NOI18N
        jLabel12.setText("ID");

        patname2.setFocusable(false);
        patname2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patname2ActionPerformed(evt);
            }
        });

        reportsedit1.setText("Generate Report");
        reportsedit1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reportsedit1MouseClicked(evt);
            }
        });

        patdelete1.setText("Dental Charts");
        patdelete1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patdelete1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(patname, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(patcontact))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pataddress)
                                    .addComponent(patzipcode)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(patreligion))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(patemail, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(patname2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(45, 45, 45)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7)
                            .addComponent(patdob, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                            .addComponent(jLabel17)
                            .addComponent(patgender, 0, 138, Short.MAX_VALUE)
                            .addComponent(jLabel3)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel14)
                    .addComponent(jLabel18)
                    .addComponent(jLabel19)
                    .addComponent(patallergies, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                    .addComponent(patoccupation)
                    .addComponent(patage))
                .addContainerGap(147, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(patsave)
                .addGap(12, 12, 12)
                .addComponent(reportsedit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(patdelete)
                .addGap(98, 98, 98)
                .addComponent(patdelete1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 200, Short.MAX_VALUE)
                .addComponent(reportsedit1)
                .addGap(56, 56, 56))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel3))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(patname2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(patdob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(patgender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(patage))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(patname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(8, 8, 8)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(patemail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pataddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(patzipcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(patcontact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(patreligion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(patoccupation, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(patallergies, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(20, 20, 20)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patsave)
                    .addComponent(patdelete)
                    .addComponent(reportsedit)
                    .addComponent(reportsedit1)
                    .addComponent(patdelete1))
                .addContainerGap())
        );

        jPanel1.setBackground(new java.awt.Color(51, 51, 255));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tw Cen MT", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Patients");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Tw Cen MT", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Appointments");
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        jLabel15.setBackground(new java.awt.Color(255, 255, 255));
        jLabel15.setFont(new java.awt.Font("Tw Cen MT", 1, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Staff");
        jLabel15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel15MouseClicked(evt);
            }
        });

        jLabel20.setBackground(new java.awt.Color(255, 255, 255));
        jLabel20.setFont(new java.awt.Font("Tw Cen MT", 1, 18)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Inventory");
        jLabel20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel20MouseClicked(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Tw Cen MT", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Dashboard");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel21.setBackground(new java.awt.Color(255, 255, 255));
        jLabel21.setFont(new java.awt.Font("Tw Cen MT", 1, 18)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Procedures");
        jLabel21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel21MouseClicked(evt);
            }
        });

        jLabel16.setBackground(new java.awt.Color(255, 255, 255));
        jLabel16.setFont(new java.awt.Font("Tw Cen MT", 0, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Logout");
        jLabel16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel16MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addComponent(jLabel1)
                            .addComponent(jLabel15)
                            .addComponent(jLabel20)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel16)))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(jLabel2)
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(20, 20, 20)
                .addComponent(jLabel4)
                .addGap(20, 20, 20)
                .addComponent(jLabel15)
                .addGap(20, 20, 20)
                .addComponent(jLabel20)
                .addGap(20, 20, 20)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel16)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
Connection Con = null;
Statement St = null;
Result Rs = null;
    private void patdeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patdeleteMouseClicked
                                   
    int selectedRow = PatTable.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a patient to delete.");
    } else {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String dbUrl = "jdbc:mysql://localhost:3306/pullandentalclinic?zeroDateTimeBehavior=CONVERT_TO_NULL";
            String username = "root";
            String password = "root";

            Connection Con = DriverManager.getConnection(dbUrl, username, password);

            // Get the patient ID from the selected row
            String patientIdString = (String) PatTable.getValueAt(selectedRow, 0);
            int patid;
            try {
                patid = Integer.parseInt(patientIdString);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Error: The selected patient ID is not a valid integer.");
                return;
            }

            String query = "UPDATE patients SET is_deleted = 1 WHERE patid = ?";
            PreparedStatement update = Con.prepareStatement(query);
            update.setInt(1, patid);

            int rowsUpdated = update.executeUpdate();
            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Patient marked as deleted successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Error: No patient was marked as deleted.");
            }
            Con.close();
            displayPatients();
        } catch (HeadlessException | SQLException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_patdeleteMouseClicked

    private void patsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patsaveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patsaveActionPerformed

    private void patsaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patsaveMouseClicked
                                       
                                   
        if (patname.getText().isEmpty() || patemail.getText().isEmpty() || pataddress.getText().isEmpty() || patzipcode.getText().isEmpty() || patcontact.getText().isEmpty() || patreligion.getText().isEmpty() || patdob.getDate() == null || patgender.getSelectedItem() == null || patage.getText().isEmpty() || patoccupation.getText().isEmpty() || patallergies.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Missing Information");
        return;
        
        } 
        String email = patemail.getText();
        // Email regex pattern for validation
        String emailPattern = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$";

        if (!email.matches(emailPattern)) {
            JOptionPane.showMessageDialog(this, "Please enter a valid email address.");
            patemail.requestFocus(); // Move focus back to the email field
            return;
        }
        else {
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                String dbUrl = "jdbc:mysql://localhost:3306/pullandentalclinic?zeroDateTimeBehavior=CONVERT_TO_NULL";
                String username = "root";
                String password = "root";

                Connection Con = DriverManager.getConnection(dbUrl, username, password);
                Statement St = Con.createStatement();

                // Get the highest patid from the database and increment it
                ResultSet rs = St.executeQuery("SELECT MAX(patid) FROM patients");
                int nextpatId = 1;
                if (rs.next()) {
                    nextpatId = rs.getInt(1) + 1;
                }

                String query = "INSERT INTO patients (patid, patname,patemail, pataddress, patcityzipcode, patcontact, patreligion, patdob, patgender, patage, patoccupation, patallergies) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                PreparedStatement add = Con.prepareStatement(query);
                add.setInt(1, nextpatId);
                add.setString(2, patname.getText());
                add.setString(3, patemail.getText());
                add.setString(4, pataddress.getText());
                add.setString(5, patzipcode.getText());
                add.setString(6, patcontact.getText());
                add.setString(7, patreligion.getText());
                add.setDate(8, new java.sql.Date(patdob.getDate().getTime()));
                add.setString(9, patgender.getSelectedItem().toString());
                add.setString(10, patage.getText());
                add.setString(11, patoccupation.getText());
                add.setString(12, patallergies.getText());

                add.executeUpdate();
                JOptionPane.showMessageDialog(this, "User added successfully");
                Con.close();
                displayPatients();
                

                // Clear the fields after successful insertion
                patname.setText("");
                patemail.setText("");
                pataddress.setText("");
                patzipcode.setText("");
                patcontact.setText("");
                patreligion.setText("");
                patdob.setDate(null);
                patgender.setSelectedIndex(0);
                patage.setText("");
                patoccupation.setText("");
                patallergies.setText("");
                

                
         
            } catch (HeadlessException | SQLException e) {
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Patients.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_patsaveMouseClicked

    private void patoccupationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patoccupationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patoccupationActionPerformed

    private void patnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patnameActionPerformed

    private void patemailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_patemailFocusLost
        
    }//GEN-LAST:event_patemailFocusLost

    private void patemailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patemailActionPerformed

    }//GEN-LAST:event_patemailActionPerformed

    private void patemailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patemailKeyTyped

    }//GEN-LAST:event_patemailKeyTyped

    private void patageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patageActionPerformed

    private void patageKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patageKeyTyped

        char c = evt.getKeyChar();
        String currentText = patage.getText();

        // Allow backspace and delete keys
        if (c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE) {
            return;
        }

        // Check if the character is a digit and the length is less than 4
        if (!Character.isDigit(c) || currentText.length() >= 3) {
            evt.consume(); // Ignore the key event
        }
    }//GEN-LAST:event_patageKeyTyped

    private void pataddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pataddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pataddressActionPerformed

    private void patzipcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patzipcodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patzipcodeActionPerformed

    private void patzipcodeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patzipcodeKeyTyped

        char c = evt.getKeyChar();
        String currentText = patzipcode.getText();

        // Allow backspace and delete keys
        if (c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE) {
            return;
        }

        // Check if the character is a digit and the length is less than 4
        if (!Character.isDigit(c) || currentText.length() >= 4) {
            evt.consume(); // Ignore the key event
        }
    }//GEN-LAST:event_patzipcodeKeyTyped

    private void patcontactFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_patcontactFocusLost

        String contactNumber = patcontact.getText().trim(); // Get the trimmed text from the textbox

        // Validate if the contact number is exactly 10 digits
        if (contactNumber.length() != 10 || !contactNumber.matches("\\d{10}")) {
            JOptionPane.showMessageDialog(null, "Invalid contact number.", "", JOptionPane.ERROR_MESSAGE);
            patcontact.requestFocus(); // Optionally, you can request focus back to the field for correction
        }
    }//GEN-LAST:event_patcontactFocusLost

    private void patcontactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patcontactActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patcontactActionPerformed

    private void patcontactKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patcontactKeyTyped

        char c = evt.getKeyChar();
        String currentText = patcontact.getText();

        // Allow backspace and delete keys
        if (c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE) {
            return;
        }

        // Check if the character is a digit and the length is less than 10
        if (!Character.isDigit(c) || currentText.length() >= 10) {
            evt.consume(); // Ignore the key event
        }

    }//GEN-LAST:event_patcontactKeyTyped

    private void patreligionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patreligionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patreligionActionPerformed

    private void patallergiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patallergiesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patallergiesActionPerformed

    private void PatTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PatTableMouseClicked
 
        int selectedRow = PatTable.getSelectedRow();
        if (selectedRow != -1) { // Ensure a row is selected
            TableModel model = PatTable.getModel();

            // Populate the text fields with data from the selected row
            patname.setText(model.getValueAt(selectedRow, 1).toString());
            patemail.setText(model.getValueAt(selectedRow, 2).toString());
            pataddress.setText(model.getValueAt(selectedRow, 3).toString());
            patzipcode.setText(model.getValueAt(selectedRow, 4).toString());
            patcontact.setText(model.getValueAt(selectedRow, 5).toString());
            patreligion.setText(model.getValueAt(selectedRow, 6).toString());

            // Date conversion for Date of Birth
            try {
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                java.util.Date date = dateFormat.parse(model.getValueAt(selectedRow, 7).toString());
                patdob.setDate(date);
            } catch (Exception e) {
                e.printStackTrace();
            }
            String gender = model.getValueAt(selectedRow, 8).toString();
            patgender.setSelectedItem(gender);
            patage.setText(model.getValueAt(selectedRow, 9).toString());
            patoccupation.setText(model.getValueAt(selectedRow, 10).toString());
            patallergies.setText(model.getValueAt(selectedRow, 11).toString());

        }
    }//GEN-LAST:event_PatTableMouseClicked

    private void reportseditMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reportseditMouseClicked
                                        
    int selectedRow = PatTable.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a patient to edit.");
    } else {
        try {
            // Get the patient ID from the selected row
            Object patIdValue = PatTable.getValueAt(selectedRow, 0);
            int patId;
            if (patIdValue instanceof Integer) {
                patId = (Integer) patIdValue;
            } else if (patIdValue instanceof String) {
                patId = Integer.parseInt((String) patIdValue);
            } else {
                throw new ClassCastException("Unexpected value type for patient ID.");
            }

            int response = JOptionPane.showConfirmDialog(this, "Do you want to save changes?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.YES_OPTION) {
                // Update the patient record in the database
                Class.forName("com.mysql.cj.jdbc.Driver");
                String dbUrl = "jdbc:mysql://localhost:3306/pullandentalclinic?zeroDateTimeBehavior=CONVERT_TO_NULL";
                String username = "root";
                String password = "root";

                Connection con = null;
                PreparedStatement update = null;
                try {
                    con = DriverManager.getConnection(dbUrl, username, password);
                    String query = "UPDATE patients SET patname = ?, patemail = ?, pataddress = ?, patcityzipcode = ?, patcontact = ?, patreligion = ?, patdob = ?, patgender = ?, patage = ?, patoccupation = ?, patallergies = ? WHERE patid = ?";
                    update = con.prepareStatement(query);
                    update.setString(1, patname.getText());
                    update.setString(2, patemail.getText());
                    update.setString(3, pataddress.getText());
                    update.setString(4, patzipcode.getText());
                    update.setString(5, patcontact.getText());
                    update.setString(6, patreligion.getText());
                    update.setDate(7, new java.sql.Date(patdob.getDate().getTime()));
                    update.setString(8, patgender.getSelectedItem().toString());
                    update.setString(9, patage.getText());
                    update.setString(10, patoccupation.getText());
                    update.setString(11, patallergies.getText());
                    update.setInt(12, patId);

                    update.executeUpdate();
                    JOptionPane.showMessageDialog(this, "Patient updated successfully");
                    displayPatients();

                    // Clear the fields after successful update
                    clearFields();
                } finally {
                    if (update != null) {
                        update.close();
                    }
                    if (con != null) {
                        con.close();
                    }
                }
            }
        } catch (HeadlessException | SQLException | ClassNotFoundException | NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    }




    }//GEN-LAST:event_reportseditMouseClicked

    private void patname2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patname2ActionPerformed

    }//GEN-LAST:event_patname2ActionPerformed

    private void reportsedit1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reportsedit1MouseClicked
        PatientReportGenerator.generatePatientReport();
    }//GEN-LAST:event_reportsedit1MouseClicked

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
 
    }//GEN-LAST:event_searchFieldActionPerformed

    private void searchFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFieldKeyTyped
                                             
    String searchText = searchField.getText().trim();
    if (!searchText.isEmpty()) {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String dbUrl = "jdbc:mysql://localhost:3306/pullandentalclinic?zeroDateTimeBehavior=CONVERT_TO_NULL";
            String username = "root";
            String password = "root";

            Connection Con = DriverManager.getConnection(dbUrl, username, password);
            String query = "SELECT LPAD(patid, 3, '0') AS patid, patname, patemail, pataddress, patcityzipcode, patcontact, patreligion, patdob, patgender, patage, patoccupation, patallergies FROM patients WHERE patname LIKE ? OR CAST(patid AS CHAR) LIKE ?";
            PreparedStatement searchStmt = Con.prepareStatement(query);         
            searchStmt.setString(1, "%" + searchText + "%");
            searchStmt.setString(2, "%" + searchText + "%");

            ResultSet Rs = searchStmt.executeQuery();

            DefaultTableModel model = (DefaultTableModel) PatTable.getModel();
            model.setRowCount(0);

            while (Rs.next()) {
                model.addRow(new Object[]{
                    Rs.getString("patid"),
                    Rs.getString("patname"),
                    Rs.getString("patemail"),
                    Rs.getString("pataddress"),
                    Rs.getString("patcityzipcode"),
                    Rs.getString("patcontact"),
                    Rs.getString("patreligion"),
                    Rs.getString("patdob"),
                    Rs.getString("patgender"),
                    Rs.getString("patage"),
                    Rs.getString("patoccupation"),
                    Rs.getString("patallergies")
                });
            }
            Con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    } else {
        // If search text is empty, display all staff
        displayPatients();
    }

    }//GEN-LAST:event_searchFieldKeyTyped

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        new Patients().setVisible(true);
        dispose();
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        new Appointments().setVisible(true);
        dispose();
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel15MouseClicked
        new Staff().setVisible(true);
        dispose();
    }//GEN-LAST:event_jLabel15MouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        new Dashboard().setVisible(true);
        dispose();
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel21MouseClicked
        new Reports().setVisible(true);
        dispose();
    }//GEN-LAST:event_jLabel21MouseClicked

    private void jLabel16MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel16MouseClicked
        new Login().setVisible(true);
        dispose();
    }//GEN-LAST:event_jLabel16MouseClicked

    private void jLabel20MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel20MouseClicked
        new Inventory().setVisible(true);
        dispose();
    }//GEN-LAST:event_jLabel20MouseClicked

    private void patdelete1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patdelete1MouseClicked
        new DentalChart().setVisible(true);
        dispose();
    }//GEN-LAST:event_patdelete1MouseClicked

public class PatientReportGenerator {

    public static void generatePatientReport() {
        String jrxmlFilePath = "C:\\Users\\Rebecca\\JaspersoftWorkspace\\MyReports\\patients_report.jrxml";
        String outputPdfPath = "C:\\Users\\Rebecca\\Desktop\\Output\\patients_report.pdf";

        Map<String, Object> parameters = new HashMap<>();
        // Add any parameters you need to pass to the report here

        JasperReportUtil.generateReport(jrxmlFilePath, outputPdfPath, parameters);
    }
}
    
private void displayPatients() {
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        String dbUrl = "jdbc:mysql://localhost:3306/pullandentalclinic?zeroDateTimeBehavior=CONVERT_TO_NULL";
        String username = "root";
        String password = "root";

        Connection Con = DriverManager.getConnection(dbUrl, username, password);
        Statement St = Con.createStatement();
        ResultSet Rs = St.executeQuery("SELECT LPAD(CAST(MAX(patid) + 1 AS CHAR), 3, '0') AS next_patid FROM patients WHERE is_deleted = 0");

        if (Rs.next()) {
            String nextPatientID = Rs.getString("next_patid");
            patname2.setText(nextPatientID);
            patname2.setEditable(false); // Make the text box non-editable
        }

        Rs = St.executeQuery("SELECT LPAD(CAST(patid AS CHAR), 3, '0') AS formatted_patid, patname, patemail, pataddress, patcityzipcode, patcontact, patreligion, patdob, patgender, patage, patoccupation, patallergies, is_deleted FROM patients WHERE is_deleted = 0");

        DefaultTableModel model = (DefaultTableModel) PatTable.getModel();
        model.setRowCount(0);

        while (Rs.next()) {
            model.addRow(new Object[]{
                Rs.getString("formatted_patid"),
                Rs.getString("patname"),
                Rs.getString("patemail"),
                Rs.getString("pataddress"),
                Rs.getString("patcityzipcode"),
                Rs.getString("patcontact"),
                Rs.getString("patreligion"),
                Rs.getString("patdob"),
                Rs.getString("patgender"),
                Rs.getString("patage"),
                Rs.getString("patoccupation"),
                Rs.getString("patallergies"),
                Rs.getInt("is_deleted") // Add is_deleted to the table model
            });
        }
        Con.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e);
    }
}


private void clearFields() {
    patname.setText("");
    patemail.setText("");
    pataddress.setText("");
    patzipcode.setText("");
    patcontact.setText("");
    patreligion.setText("");
    patdob.setDate(null);
    patgender.setSelectedIndex(0);
    patage.setText("");
    patoccupation.setText("");
    patallergies.setText("");
}



    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Patients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Patients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Patients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Patients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Patients().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable PatTable;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField pataddress;
    private javax.swing.JTextField patage;
    private javax.swing.JTextField patallergies;
    private javax.swing.JTextField patcontact;
    private javax.swing.JButton patdelete;
    private javax.swing.JButton patdelete1;
    private com.toedter.calendar.JDateChooser patdob;
    private javax.swing.JTextField patemail;
    private javax.swing.JComboBox<String> patgender;
    private javax.swing.JTextField patname;
    private javax.swing.JTextField patname2;
    private javax.swing.JTextField patoccupation;
    private javax.swing.JTextField patreligion;
    private javax.swing.JButton patsave;
    private javax.swing.JTextField patzipcode;
    private javax.swing.JButton reportsedit;
    private javax.swing.JButton reportsedit1;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables
}
