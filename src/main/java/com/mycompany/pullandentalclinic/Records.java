/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.pullandentalclinic;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Rebecca
 */
public class Records extends javax.swing.JFrame {

    /**
     * Creates new form Records
     */
    public Records() {
        initComponents();
        parentpanel.removeAll();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        parentpanel = new javax.swing.JPanel();
        Patients = new javax.swing.JPanel();
        searchField = new javax.swing.JTextField();
        cPatTable = new javax.swing.JScrollPane();
        PatTable = new javax.swing.JTable();
        Appointments = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        appTable = new javax.swing.JTable();
        searchField1 = new javax.swing.JTextField();
        Staff = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        stfTable = new javax.swing.JTable();
        searchField2 = new javax.swing.JTextField();
        Inventory = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        invTable = new javax.swing.JTable();
        searchField3 = new javax.swing.JTextField();
        Procedure = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        reportsTable = new javax.swing.JTable();
        searchField4 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(51, 51, 255));

        jButton1.setText("Patients");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setText("Appoinments");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jButton3.setText("Staff");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jButton4.setText("Inventory");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        jButton5.setText("Procedure");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addContainerGap(332, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        parentpanel.setLayout(new java.awt.CardLayout());

        searchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchFieldKeyTyped(evt);
            }
        });

        PatTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Email", "Home Address", "Zip Code", "Mobile No.", "Religion", "Birthday", "gender", "age", "Occupation", "Allergies"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        PatTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PatTableMouseClicked(evt);
            }
        });
        cPatTable.setViewportView(PatTable);

        javax.swing.GroupLayout PatientsLayout = new javax.swing.GroupLayout(Patients);
        Patients.setLayout(PatientsLayout);
        PatientsLayout.setHorizontalGroup(
            PatientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cPatTable, javax.swing.GroupLayout.DEFAULT_SIZE, 819, Short.MAX_VALUE)
            .addGroup(PatientsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PatientsLayout.setVerticalGroup(
            PatientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PatientsLayout.createSequentialGroup()
                .addContainerGap(94, Short.MAX_VALUE)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cPatTable, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        parentpanel.add(Patients, "card2");

        appTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Patient Name", "Date", "Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        appTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                appTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(appTable);

        searchField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchField1ActionPerformed(evt);
            }
        });
        searchField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchField1KeyTyped(evt);
            }
        });

        javax.swing.GroupLayout AppointmentsLayout = new javax.swing.GroupLayout(Appointments);
        Appointments.setLayout(AppointmentsLayout);
        AppointmentsLayout.setHorizontalGroup(
            AppointmentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 819, Short.MAX_VALUE)
            .addGroup(AppointmentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(AppointmentsLayout.createSequentialGroup()
                    .addGap(64, 64, 64)
                    .addGroup(AppointmentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(AppointmentsLayout.createSequentialGroup()
                            .addGap(2, 2, 2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 688, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(searchField1, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(65, Short.MAX_VALUE)))
        );
        AppointmentsLayout.setVerticalGroup(
            AppointmentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 374, Short.MAX_VALUE)
            .addGroup(AppointmentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(AppointmentsLayout.createSequentialGroup()
                    .addGap(36, 36, 36)
                    .addComponent(searchField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(10, 10, 10)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(36, Short.MAX_VALUE)))
        );

        parentpanel.add(Appointments, "card3");

        stfTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Staff Name", "Address", "Mobile#", "Date of Birth", "Gender", "Occupation"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        stfTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stfTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(stfTable);

        searchField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchField2KeyTyped(evt);
            }
        });

        javax.swing.GroupLayout StaffLayout = new javax.swing.GroupLayout(Staff);
        Staff.setLayout(StaffLayout);
        StaffLayout.setHorizontalGroup(
            StaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 819, Short.MAX_VALUE)
            .addGroup(StaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(StaffLayout.createSequentialGroup()
                    .addGap(65, 65, 65)
                    .addGroup(StaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 688, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchField2, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(66, Short.MAX_VALUE)))
        );
        StaffLayout.setVerticalGroup(
            StaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 374, Short.MAX_VALUE)
            .addGroup(StaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(StaffLayout.createSequentialGroup()
                    .addGap(45, 45, 45)
                    .addComponent(searchField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(46, Short.MAX_VALUE)))
        );

        parentpanel.add(Staff, "card4");

        invTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Item Name", "Quantity", "Expiration Date", "Classification", "Remarks"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        invTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                invTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(invTable);

        searchField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchField3KeyTyped(evt);
            }
        });

        javax.swing.GroupLayout InventoryLayout = new javax.swing.GroupLayout(Inventory);
        Inventory.setLayout(InventoryLayout);
        InventoryLayout.setHorizontalGroup(
            InventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InventoryLayout.createSequentialGroup()
                .addContainerGap(71, Short.MAX_VALUE)
                .addGroup(InventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchField3, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 688, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60))
        );
        InventoryLayout.setVerticalGroup(
            InventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InventoryLayout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addComponent(searchField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );

        parentpanel.add(Inventory, "card5");

        reportsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Patient", "Date", "Prescription", "Cleaning", "Extraction", "Root Canal", "Braces", "Dentures", "Dentist", "Others"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        reportsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reportsTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(reportsTable);

        searchField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchField4KeyTyped(evt);
            }
        });

        javax.swing.GroupLayout ProcedureLayout = new javax.swing.GroupLayout(Procedure);
        Procedure.setLayout(ProcedureLayout);
        ProcedureLayout.setHorizontalGroup(
            ProcedureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 819, Short.MAX_VALUE)
            .addGroup(ProcedureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ProcedureLayout.createSequentialGroup()
                    .addGap(65, 65, 65)
                    .addGroup(ProcedureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(ProcedureLayout.createSequentialGroup()
                            .addComponent(searchField4, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(179, 179, 179))
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 688, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(66, Short.MAX_VALUE)))
        );
        ProcedureLayout.setVerticalGroup(
            ProcedureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 374, Short.MAX_VALUE)
            .addGroup(ProcedureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ProcedureLayout.createSequentialGroup()
                    .addGap(42, 42, 42)
                    .addComponent(searchField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(10, 10, 10)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(43, Short.MAX_VALUE)))
        );

        parentpanel.add(Procedure, "card5");

        getContentPane().add(parentpanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
    parentpanel.removeAll();
    parentpanel.add(Patients);
    parentpanel.repaint();
    parentpanel.revalidate();
    displayPatients();
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
    parentpanel.removeAll();
    parentpanel.add(Appointments);
    parentpanel.repaint();
    parentpanel.revalidate();
    displayAppointment();
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
    parentpanel.removeAll();
    parentpanel.add(Staff);
    parentpanel.repaint();
    parentpanel.revalidate();
    displayStaff();
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
    parentpanel.removeAll();
    parentpanel.add(Inventory);
    parentpanel.repaint();
    parentpanel.revalidate();
    displayInventory();
    }//GEN-LAST:event_jButton4MouseClicked

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
    parentpanel.removeAll();
    parentpanel.add(Procedure);
    parentpanel.repaint();
    parentpanel.revalidate();
    displayReports();
    }//GEN-LAST:event_jButton5MouseClicked

    private void PatTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PatTableMouseClicked

    }//GEN-LAST:event_PatTableMouseClicked

    private void searchFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFieldKeyTyped
String searchText = searchField.getText().trim();
    if (!searchText.isEmpty()) {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            String dbUrl = "jdbc:mysql://localhost:3306/pullandentalclinic?zeroDateTimeBehavior=CONVERT_TO_NULL";
            String username = "root";
            String password = "root";

            Connection Con = DriverManager.getConnection(dbUrl, username, password);
            String query = "SELECT LPAD(patid, 3, '0') AS patid, patname, patemail, pataddress, patcityzipcode, patcontact, patreligion, patdob, patgender, patage, patoccupation, patallergies FROM patients WHERE patname LIKE ? OR CAST(patid AS CHAR) LIKE ?";
            PreparedStatement searchStmt = Con.prepareStatement(query);         
            searchStmt.setString(1, "%" + searchText + "%");
            searchStmt.setString(2, "%" + searchText + "%");

            ResultSet Rs = searchStmt.executeQuery();

            DefaultTableModel model = (DefaultTableModel) PatTable.getModel();
            model.setRowCount(0);

            while (Rs.next()) {
                model.addRow(new Object[]{
                    Rs.getString("patid"),
                    Rs.getString("patname"),
                    Rs.getString("patemail"),
                    Rs.getString("pataddress"),
                    Rs.getString("patcityzipcode"),
                    Rs.getString("patcontact"),
                    Rs.getString("patreligion"),
                    Rs.getString("patdob"),
                    Rs.getString("patgender"),
                    Rs.getString("patage"),
                    Rs.getString("patoccupation"),
                    Rs.getString("patallergies")
                });
            }
            Con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        }
    } else {
        // If search text is empty, display all staff
        displayPatients();
    }
    }//GEN-LAST:event_searchFieldKeyTyped

    private void appTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appTableMouseClicked

    }//GEN-LAST:event_appTableMouseClicked

    private void searchField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchField1ActionPerformed

    private void searchField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchField1KeyTyped
String searchText = searchField1.getText().trim();
if (!searchText.isEmpty()) {
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        String dbUrl = "jdbc:mysql://localhost:3306/pullandentalclinic?zeroDateTimeBehavior=CONVERT_TO_NULL";
        String username = "root";
        String password = "root";

        Connection Con = DriverManager.getConnection(dbUrl, username, password);
        String query = "SELECT LPAD(CAST(appid AS CHAR), 3, '0') AS formatted_appid, apppatient, appdate, apptime " +
                       "FROM appointment " +
                       "WHERE apppatient LIKE ? " +
                       "   OR CAST(appid AS CHAR) LIKE ? " +
                       "   OR DATE_FORMAT(appdate, '%Y-%m-%d') LIKE ?";
        PreparedStatement searchStmt = Con.prepareStatement(query);
        searchStmt.setString(1, "%" + searchText + "%");
        searchStmt.setString(2, "%" + searchText + "%");
        searchStmt.setString(3, "%" + searchText + "%");

        ResultSet Rs = searchStmt.executeQuery();

        DefaultTableModel model = (DefaultTableModel) appTable.getModel();
        model.setRowCount(0);

        while (Rs.next()) {
            model.addRow(new Object[]{
                Rs.getString("formatted_appid"),
                Rs.getString("apppatient"),
                Rs.getDate("appdate"),
                Rs.getString("apptime")
            });
        }
        Con.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }
} else {
    // If search text is empty, display all appointments
    displayAppointment();
}
    }//GEN-LAST:event_searchField1KeyTyped

    private void stfTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stfTableMouseClicked

    }//GEN-LAST:event_stfTableMouseClicked

    private void searchField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchField2KeyTyped
        String searchText = searchField2.getText().trim();
        if (!searchText.isEmpty()) {
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                String dbUrl = "jdbc:mysql://localhost:3306/pullandentalclinic?zeroDateTimeBehavior=CONVERT_TO_NULL";
                String username = "root";
                String password = "root";

                Connection Con = DriverManager.getConnection(dbUrl, username, password);
                String query = "SELECT LPAD(CAST(usersid AS CHAR), 3, '0') AS formatted_usersid, usersrealname, usersemail, userscontact, usersdob, usersgender, usersoccupation FROM users WHERE usersrealname LIKE ? OR CAST(usersid AS CHAR) LIKE ?";
                PreparedStatement searchStmt = Con.prepareStatement(query);
                searchStmt.setString(1, "%" + searchText + "%");
                searchStmt.setString(2, "%" + searchText + "%");

                ResultSet Rs = searchStmt.executeQuery();

                DefaultTableModel model = (DefaultTableModel) stfTable.getModel();
                model.setRowCount(0);

                while (Rs.next()) {
                    model.addRow(new Object[]{
                        Rs.getString("formatted_usersid"),
                        Rs.getString("usersrealname"),
                        Rs.getString("usersemail"),
                        Rs.getString("userscontact"),
                        Rs.getDate("usersdob"),
                        Rs.getString("usersgender"),
                        Rs.getString("usersoccupation")
                    });
                }
                Con.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            }
        } else {
            // If search text is empty, display all staff
            displayStaff();
        }
    }//GEN-LAST:event_searchField2KeyTyped

    private void invTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_invTableMouseClicked

    }//GEN-LAST:event_invTableMouseClicked

    private void searchField3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchField3KeyTyped
        String searchText = searchField3.getText().trim();
        if (!searchText.isEmpty()) {
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                String dbUrl = "jdbc:mysql://localhost:3306/pullandentalclinic?zeroDateTimeBehavior=CONVERT_TO_NULL";
                String username = "root";
                String password = "root";

                Connection Con = DriverManager.getConnection(dbUrl, username, password);
                String query = "SELECT LPAD(CAST(invid AS CHAR), 3, '0') AS formatted_invid, invname, invquantity, invdoe, invtype, invremarks " +
                "FROM inventory " +
                "WHERE invname LIKE ? " +
                "   OR CAST(invid AS CHAR) LIKE ?";
                PreparedStatement searchStmt = Con.prepareStatement(query);
                searchStmt.setString(1, "%" + searchText + "%");
                searchStmt.setString(2, "%" + searchText + "%");

                ResultSet Rs = searchStmt.executeQuery();

                DefaultTableModel model = (DefaultTableModel) invTable.getModel();
                model.setRowCount(0);

                while (Rs.next()) {
                    model.addRow(new Object[]{
                        Rs.getString("formatted_invid"),
                        Rs.getString("invname"),
                        Rs.getInt("invquantity"),
                        Rs.getDate("invdoe"),
                        Rs.getString("invtype"),
                        Rs.getString("invremarks")
                    });
                }
                Con.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            }
        } else {
            // If search text is empty, display all inventory
            displayInventory();
        }
    }//GEN-LAST:event_searchField3KeyTyped

    private void reportsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reportsTableMouseClicked

    }//GEN-LAST:event_reportsTableMouseClicked

    private void searchField4KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchField4KeyTyped
        String searchText = searchField4.getText().trim();
        if (!searchText.isEmpty()) {
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                String dbUrl = "jdbc:mysql://localhost:3306/pullandentalclinic?zeroDateTimeBehavior=CONVERT_TO_NULL";
                String username = "root";
                String password = "root";

                Connection Con = DriverManager.getConnection(dbUrl, username, password);
                String query = "SELECT LPAD(CAST(repid AS CHAR), 3, '0') AS formatted_repid, reppatient, repdate, repprescription, repcleaning, repextraction, reprootcanal, repbraces, repdentures, repdentist, repothers FROM reports WHERE reppatient LIKE ? OR CAST(repid AS CHAR) LIKE ?";
                PreparedStatement searchStmt = Con.prepareStatement(query);
                searchStmt.setString(1, "%" + searchText + "%");
                searchStmt.setString(2, "%" + searchText + "%");

                ResultSet Rs = searchStmt.executeQuery();

                DefaultTableModel model = (DefaultTableModel) reportsTable.getModel();
                model.setRowCount(0);

                while (Rs.next()) {
                    model.addRow(new Object[]{
                        Rs.getString("formatted_repid"),
                        Rs.getString("reppatient"),
                        Rs.getDate("repdate"),
                        Rs.getString("repprescription"),
                        Rs.getString("repcleaning"),
                        Rs.getString("repextraction"),
                        Rs.getString("reprootcanal"),
                        Rs.getString("repbraces"),
                        Rs.getString("repdentures"),
                        Rs.getString("repdentist"),
                        Rs.getString("repothers")
                    });
                }
                Con.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            }
        } else {
            // If search text is empty, display all reports
            displayReports();
        }
    }//GEN-LAST:event_searchField4KeyTyped
        private void displayReports() {
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        String dbUrl = "jdbc:mysql://localhost:3306/pullandentalclinic?zeroDateTimeBehavior=CONVERT_TO_NULL";
        String username = "root";
        String password = "root";

        Connection Con = DriverManager.getConnection(dbUrl, username, password);
        
        // Get the next available repid
        String query = "SELECT LPAD(CAST(IFNULL(MAX(CAST(repid AS SIGNED)), 0) + 1 AS CHAR), 3, '0') AS next_id FROM reports";
        PreparedStatement St = Con.prepareStatement(query);
        ResultSet Rs = St.executeQuery();
        
        String nextId = "";
        if (Rs.next()) {
            nextId = Rs.getString("next_id");
        }
        
        

        // Fetch and display the reports data
        query = "SELECT LPAD(CAST(repid AS CHAR), 3, '0') AS formatted_repid, reppatient, repdate, repprescription, repcleaning, repextraction, reprootcanal, repbraces, repdentures, repdentist, repothers FROM reports";
        St = Con.prepareStatement(query);
        Rs = St.executeQuery();

        DefaultTableModel model = (DefaultTableModel) reportsTable.getModel();
        model.setRowCount(0);

        while (Rs.next()) {
            model.addRow(new Object[]{
                Rs.getString("formatted_repid"),
                Rs.getString("reppatient"),
                Rs.getDate("repdate"),
                Rs.getString("repprescription"),
                Rs.getString("repcleaning"),
                Rs.getString("repextraction"),
                Rs.getString("reprootcanal"),
                Rs.getString("repbraces"),
                Rs.getString("repdentures"),
                Rs.getString("repdentist"),
                Rs.getString("repothers")
            });
        }
        Con.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    }
}
    private void displayInventory() {
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        String dbUrl = "jdbc:mysql://localhost:3306/pullandentalclinic?zeroDateTimeBehavior=CONVERT_TO_NULL";
        String username = "root";
        String password = "root";

        Connection Con = DriverManager.getConnection(dbUrl, username, password);

        // Get the next available invid
        String query = "SELECT LPAD(CAST(IFNULL(MAX(CAST(invid AS SIGNED)), 0) + 1 AS CHAR), 3, '0') AS next_id FROM inventory";
        PreparedStatement St = Con.prepareStatement(query);
        ResultSet Rs = St.executeQuery();

        String nextId = "";
        if (Rs.next()) {
            nextId = Rs.getString("next_id");
        }



        // Fetch and display the inventory data excluding items marked as deleted
        query = "SELECT LPAD(CAST(invid AS CHAR), 3, '0') AS formatted_invid, invname, invquantity, invdoe, invtype, invremarks " +
                "FROM inventory WHERE is_deleted = 0";
        St = Con.prepareStatement(query);
        Rs = St.executeQuery();

        DefaultTableModel model = (DefaultTableModel) invTable.getModel();
        model.setRowCount(0);

        while (Rs.next()) {
            model.addRow(new Object[]{
                Rs.getString("formatted_invid"),
                Rs.getString("invname"),
                Rs.getInt("invquantity"),
                Rs.getDate("invdoe"),
                Rs.getString("invtype"),
                Rs.getString("invremarks")
            });
        }



        Con.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e);
    }
}
    public void displayPatients() {
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        String dbUrl = "jdbc:mysql://localhost:3306/pullandentalclinic?zeroDateTimeBehavior=CONVERT_TO_NULL";
        String username = "root";
        String password = "root";

        Connection Con = DriverManager.getConnection(dbUrl, username, password);
        Statement St = Con.createStatement();
        ResultSet Rs = St.executeQuery("SELECT LPAD(CAST(MAX(patid) + 1 AS CHAR), 3, '0') AS next_patid FROM patients WHERE is_deleted = 0");



        Rs = St.executeQuery("SELECT LPAD(CAST(patid AS CHAR), 3, '0') AS formatted_patid, patname, patemail, pataddress, patcityzipcode, patcontact, patreligion, patdob, patgender, patage, patoccupation, patallergies, is_deleted FROM patients WHERE is_deleted = 0");

        DefaultTableModel model = (DefaultTableModel) PatTable.getModel();
        model.setRowCount(0);

        while (Rs.next()) {
            model.addRow(new Object[]{
                Rs.getString("formatted_patid"),
                Rs.getString("patname"),
                Rs.getString("patemail"),
                Rs.getString("pataddress"),
                Rs.getString("patcityzipcode"),
                Rs.getString("patcontact"),
                Rs.getString("patreligion"),
                Rs.getString("patdob"),
                Rs.getString("patgender"),
                Rs.getString("patage"),
                Rs.getString("patoccupation"),
                Rs.getString("patallergies"),
                Rs.getInt("is_deleted") // Add is_deleted to the table model
            });
        }
        Con.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e);
    }
}
    private void displayStaff() {
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        String dbUrl = "jdbc:mysql://localhost:3306/pullandentalclinic?zeroDateTimeBehavior=CONVERT_TO_NULL";
        String username = "root";
        String password = "root";

        Connection Con = DriverManager.getConnection(dbUrl, username, password);
        
        // Get the next available usersid
        String query = "SELECT LPAD(CAST(IFNULL(MAX(CAST(usersid AS SIGNED)), 0) + 1 AS CHAR), 3, '0') AS next_id FROM users";
        PreparedStatement St = Con.prepareStatement(query);
        ResultSet Rs = St.executeQuery();
        
        String nextId = "";
        if (Rs.next()) {
            nextId = Rs.getString("next_id");
        }


        // Fetch and display the staff data
        query = "SELECT LPAD(CAST(usersid AS CHAR), 3, '0') AS formatted_usersid, usersrealname, usersemail, userscontact, usersdob, usersgender, usersoccupation FROM users";
        St = Con.prepareStatement(query);
        Rs = St.executeQuery();

        DefaultTableModel model = (DefaultTableModel) stfTable.getModel();
        model.setRowCount(0);

        while (Rs.next()) {
            model.addRow(new Object[]{
                Rs.getString("formatted_usersid"),
                Rs.getString("usersrealname"),
                Rs.getString("usersemail"),
                Rs.getString("userscontact"),
                Rs.getDate("usersdob"),
                Rs.getString("usersgender"),
                Rs.getString("usersoccupation")
            });
        }
        Con.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e);
    }
}
    private void displayAppointment() {
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        String dbUrl = "jdbc:mysql://localhost:3306/pullandentalclinic?zeroDateTimeBehavior=CONVERT_TO_NULL";
        String username = "root";
        String password = "root";

        Connection Con = DriverManager.getConnection(dbUrl, username, password);
        String query = "SELECT LPAD(CAST(IFNULL(MAX(CAST(appid AS SIGNED)), 0) + 1 AS CHAR), 3, '0') AS next_id FROM appointment";
        PreparedStatement St = Con.prepareStatement(query);
        ResultSet Rs = St.executeQuery();

        String nextId = "";
        if (Rs.next()) {
            nextId = Rs.getString("next_id");
        }



        query = "SELECT LPAD(CAST(appid AS CHAR), 3, '0') AS formatted_appid, apppatient, appdate, apptime FROM appointment";
        St = Con.prepareStatement(query);
        Rs = St.executeQuery();
        DefaultTableModel model = (DefaultTableModel) appTable.getModel();
        model.setRowCount(0);

        while (Rs.next()) {
            model.addRow(new Object[]{
                Rs.getString("formatted_appid"),
                Rs.getString("apppatient"),
                Rs.getDate("appdate"),
                Rs.getString("apptime")
            });
        }
        Con.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e);
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Records.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Records.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Records.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Records.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Records().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Appointments;
    private javax.swing.JPanel Inventory;
    private javax.swing.JTable PatTable;
    private javax.swing.JPanel Patients;
    private javax.swing.JPanel Procedure;
    private javax.swing.JPanel Staff;
    private javax.swing.JTable appTable;
    private javax.swing.JScrollPane cPatTable;
    private javax.swing.JTable invTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLayeredPane jLayeredPane13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel parentpanel;
    private javax.swing.JTable reportsTable;
    private javax.swing.JTextField searchField;
    private javax.swing.JTextField searchField1;
    private javax.swing.JTextField searchField2;
    private javax.swing.JTextField searchField3;
    private javax.swing.JTextField searchField4;
    private javax.swing.JTable stfTable;
    // End of variables declaration//GEN-END:variables
}
